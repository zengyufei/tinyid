# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Release TinyId

on:
  push:
    tags:
      - releases/[0-9]+.[0-9]+.[0-9]+
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: olegtarasov/get-tag@v2.1.4
        id: tagName
        with:
          tagRegex: "releases/(.*)"  # Optional. Returns specified group text as tag name. Full tag string is returned if regex is not defined.
          tagRegexGroup: 1 # Optional. Default is 1.

      - name: Check if Release Already Exists
        id: check_release
        uses: actions/github-script@v6 # 使用 github-script 执行 API 查询
        env:
          TAG_NAME_TO_CHECK: ${{ github.ref }} # 使用完整的引用名称，例如 'refs/tags/releases/0.0.1'
        with:
          script: |
            try {
              const { repo, owner } = context.repo;
              // 尝试获取与当前标签对应的 Release
              const response = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: process.env.TAG_NAME_TO_CHECK.replace('refs/tags/', ''), // API需要纯标签名，所以需要移除 'refs/tags/'
              });
              console.log(`Release for tag ${process.env.TAG_NAME_TO_CHECK} already exists.`);
              core.setOutput('release_exists', 'true');
            } catch (error) {
              if (error.status === 404) {
                console.log(`No Release found for tag ${process.env.TAG_NAME_TO_CHECK}.`);
                core.setOutput('release_exists', 'false');
              } else {
                // 对于其他错误，重新抛出
                throw error;
              }
            }

      - name: Set version
        run: |
          mvn versions:set -DnewVersion=${{ steps.tagName.outputs.tag }}

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Create Release
        id: create_release
        # 仅当 Release 不存在时才执行此步骤
        if: steps.check_release.outputs.release_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.tagName.outputs.tag }}
          body: |
            Changes in this Release
            - test release
          draft: false
          prerelease: false

      - name: Upload TinyId client Release Asset
        id: upload-release-client-asset
        # 仅当 Release 成功创建时才执行此步骤
        if: steps.create_release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tinyid-client/target/tinyid-client-${{ steps.tagName.outputs.tag }}.jar
          asset_name: tinyid-client-${{ steps.tagName.outputs.tag }}.jar
          asset_content_type: application/zip

      - name: Upload TinyId server Release Asset
        id: upload-release-server-asset
        # 仅当 Release 成功创建时才执行此步骤
        if: steps.create_release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tinyid-server/target/tinyid-server-${{ steps.tagName.outputs.tag }}.jar
          asset_name: tinyid-server-${{ steps.tagName.outputs.tag }}.jar
          asset_content_type: application/zip
