# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Release TinyId

on:
  push:
    tags:
      - releases/[0-9]+.[0-9]+.[0-9]+

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout 代码
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 设置 JDK 1.8
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # 使用 olegtarasov/get-tag 获取纯净的标签版本号
      - name: Get Tag Name
        uses: olegtarasov/get-tag@v2.1.4
        id: tagName # outputs.tag 将是 0.0.1
        with:
          tagRegex: "releases/(.*)"
          tagRegexGroup: 1

      # 设置 Maven 项目版本
      - name: Set Maven Project Version
        run: mvn versions:set -DnewVersion=${{ steps.tagName.outputs.tag }}

      # 构建 Maven 项目
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # 检查 Release 是否已存在并获取其信息
      - name: Check if Release Exists
        id: get_release_info
        uses: actions/github-script@v6
        env:
          # `tag` 参数需要纯净的标签名，所以我们使用 olegtarasov/get-tag 的输出
          TAG_NAME_TO_CHECK: ${{ steps.tagName.outputs.tag }}
        with:
          script: |
            try {
              const { repo, owner } = context.repo;
              const tag = process.env.TAG_NAME_TO_CHECK;
              console.log(`Checking for Release with tag: ${tag}`);
              const response = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: tag,
              });
              console.log(`Release for tag ${tag} already exists. ID: ${response.data.id}`);
              core.setOutput('release_exists', 'true');
              // 这里我们不再需要 upload_url，因为 svenstaro/upload-release-action 不使用它
            } catch (error) {
              if (error.status === 404) {
                console.log(`No Release found for tag ${tag}.`);
                core.setOutput('release_exists', 'false');
              } else {
                console.error(`Error checking release: ${error.message}`);
                throw error;
              }
            }

      # 如果 Release 不存在，则创建 Release
      - name: Create Release (if not already exists)
        id: create_release
        if: steps.get_release_info.outputs.release_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }} # 创建 Release 需要完整的 Git 引用
          release_name: Release ${{ steps.tagName.outputs.tag }}
          body: |
            Changes in this Release
            - test release
          draft: false
          prerelease: false

      # 上传 TinyId 客户端 Release 资产
      # 该 Action 内部可能产生 set-output 警告，但根据您的要求不改变其版本。
      # 它通过 'tag' 参数关联 Release，而不是 'upload_url'。
      - name: Upload TinyId Client Release Asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./tinyid-client/target/tinyid-client-${{ steps.tagName.outputs.tag }}.jar
          asset_name: tinyid-client-${{ steps.tagName.outputs.tag }}.jar
          tag: releases/${{ steps.tagName.outputs.tag }} # 使用纯净的标签名来关联 Release

      # 上传 TinyId 服务器 Release 资产
      # 同样，该 Action 内部可能产生 set-output 警告，但根据您的要求不改变其版本。
      - name: Upload TinyId Server Release Asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./tinyid-server/target/tinyid-server-${{ steps.tagName.outputs.tag }}.jar
          asset_name: tinyid-server-${{ steps.tagName.outputs.tag }}.jar
          tag: releases/${{ steps.tagName.outputs.tag }} # 使用纯净的标签名来关联 Release
